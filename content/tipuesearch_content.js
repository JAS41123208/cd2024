var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://jas41123208.github.io/cd2024/ \n 網誌:\xa0 https://jas41123208.github.io/cd2024/blog \n 簡報:  https://jas41123208.github.io/cd2024/reveal \n 倉儲:  https://jas41123208.github.io/cd2024/ \n', 'tags': '', 'url': 'About.html'}, {'title': 'LaTeX', 'text': '各組員必須能在各自的個人課程倉儲放置所被交付編寫的 \xa0.txt (in LaTeX 格式), 然後整合至各組的分組倉儲, 由 xelatex 編譯出各週的分組報告 pdf 檔案. \n 個人負責段落:txt \n \\documentclass[12pt,a4paper]{report}\n\\usepackage{xeCJK}\n\\setCJKmainfont{cwTeXKai}\n\\usepackage{enumerate}\n\\usepackage{type1cm} %調整字體絕對大小\n\\usepackage{textpos} %設定文字絕對位置\n\\usepackage[top=2.5truecm,bottom=2.5truecm,\nleft=3truecm,right=2.5truecm]{geometry}\n\\usepackage{titlesec} %目錄標題設定模組\n\\usepackage{titletoc} %目錄內容設定模組\n\\usepackage{textcomp} %表格設定模組\n\\usepackage{multirow} %合併行\n%\\usepackage{multicol} %合併欄\n\\usepackage{CJK} %中文模組\n\\usepackage{CJKnumb} %中文數字模組\n\\usepackage{wallpaper} %浮水印\n\\usepackage{listings} %引用程式碼\n\\usepackage{hyperref} %引用url連結\n\\usepackage{setspace}\n\\usepackage{lscape}%設定橫式\n\\lstset{language=Python} %設定語言\n\\usepackage{tocloft}\n\\basicstyle=\\fontsize{10pt}{2pt}\\selectfont, %設定程式內文字體大小\nframe=lines, %設定程式框架為線}\n%\\usepackage{subcaption}%副圖標\n\\graphicspath{{./../images/}} %圖片預設讀取路徑\n\\usepackage{indentfirst} %設定開頭縮排模組\n\\renewcommand{\\figurename}{\\Large 圖.} %更改圖片標題名稱\n\\renewcommand{\\tablename}{\\Large 表.}\n\\renewcommand{\\lstlistingname}{\\Large 程式.} %設定程式標示名稱\n\\hoffset=-5mm %調整左右邊界\n\\voffset=-8mm %調整上下邊界\n\\setlength{\\parindent}{2em}%設定首行行距縮排\n\\usepackage{appendix} %附錄\n\\usepackage{diagbox}%引用表格\n\\usepackage{multirow}%表格置中\n%\\usepackage{number line}\n%=------------------更改標題內容----------------------=%\n\\titleformat{\\chapter}[hang]{\\center\\sectionef\\fontsize{20pt}{1pt}\\bfseries}{\\LARGE 第\\CJKnumber{\\thechapter}章}{1em}{}[]\n\\titleformat{\\section}[hang]{\\sectionef\\fontsize{18pt}{2.5pt}\\bfseries}{{\\thesection}}{0.5em}{}[]\n\\titleformat{\\subsection}[hang]{\\sectionef\\fontsize{18pt}{2.5pt}\\bfseries}{{\\thesubsection}}{1em}{}[]\n%=----------------------章節間距----------------------=%\n\\titlespacing*{\\chapter} {0pt}{0pt}{18pt}\n\\titlespacing*{\\section} {0pt}{12pt}{6pt}\n\\titlespacing*{\\subsection} {0pt}{6pt}{6pt}\n%=----------------------標題-------------------------=%\n\\begin{document} %文件\n\\vspace{12em}\n\\makebox[1.5\\width][s] %[s] 代表 Stretch the interword space in text across the entire width\n{\\fontsize{24pt}{2.5pt}都靈理工大學}\\\\[18pt]\nPOLITECNICO DI TORINO\n\n{對於ODOO軟體在產品生命周期管理、製造執行系統及其整合能力的分析}\\\\[18pt]\n\nANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING\nPRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION\nSYSTEMS AND THEIR INTEGRATION\n\\includegraphics[width=0.9\\textwidth,height=0.5\\textwidth]{P1.png}\n\n\\vspace{30em} %下移\n{督導候選人：Giulia BrunoLucas Flabiano PerottiFranco Lombardi}\\\\[18pt]\n\\vspace{5em}\n{2020年至2021年學年}\\\\[18pt]\n\nAcademic Year 2020 – 2021\n\n\\vspace{1em}\n{本作品受創用CC授權條款保護}\\\\[12pt]\nhis work is subject to the Creative Commons Licence\n\n\\vspace{1em}\n{版權所有}\\\\[18pt]\n\nAll Rights Reserved\n\n\\vspace{10em}\n\\section{致謝}\n\nACKNOWLEDGMENTS\n\\vspace{1em}\n{我想感謝Giulia Bruno博士提供的專業建議和邀請我參與此項目的機會，以及Emiliano Traini在這個論文過程中給予的非凡支持}\\\\[12pt]\n\nI would like to thank Dr. Giulia Bruno for her expert advice and invitation to develop this\nproject, as well as Emiliano Traini, for his extraordinary support in this thesis process.\n\n\\vspace{1em}\n{我要向我的父母，Julio和Michelle，表達最誠摯的感激之情。他們給了我一切，從我的生命到他們廣泛且無條件的支持和鼓勵；同樣地，我也要感謝我的兄弟們和我的未婚妻Ana，在這些年裡他們給予我啟發}\\\\[18pt]\n\nMy most sincere gratitude to my parents, Julio and Michelle, who gave me everything,\nfrom my life to their extensive and unconditional support and encouragement; also, to my\nbrothers and my fiancée Ana, who inspired me through all these years.\n\n\\vspace{1em}\n{我要對Icaro、Matt和Maz表達我最深的感謝和欣賞，他們在這個項目中以及在其他時刻給予我的無盡幫助和支持，推動我變得更好。同時，也感謝那些觸動了我的生命，成為我最大的禮物的人，你們都知道你們是誰，我真的很感激能與你們一起分享我生命中的特別時刻}\\\\[18pt]\n\nMy deepest thanks and appreciation to Icaro, Matt, and Maz, for their endless help and\nsupport throughout not just this project, but for all the other moments in which they pushed\nme to be better. Also, for those who have touched my life, being my greatest gifts, you all\nknow who you are, and I am truly grateful for sharing special moments of my life with you.\n\n\\vspace{40em}\n\\section{摘要}\n\nABSTRACT\n\n\\vspace{1em}\n{\\fontsize{24pt}{0pt}ODOO軟件在產品生命周期管理和製造執行系統方面的能力及其整合分析}\\\\[18pt]\n\nANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING\nPRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION\nSYSTEMS AND THEIR INTEGRATION\n\n\\vspace{1em}\n{20世紀下半葉以電腦技術在生產的各個方面的進步而著稱}\\\\[18pt]\n\nThe second half of the 20th century had been marked for the advancements of computer\ntechnology in all aspects of production.\n\n\\vspace{0.5em}\n{該陳述的關鍵特徵是，隨著計算能力的增加所帶來的複雜性增加，信息量也越來越龐大}\\\\[18pt]\n{從工業景觀的不同角度來看，由於對組織、自動化和減少浪費的迫切需要，出現了幾個系統，重點是利用這些寶貴的數據資源}\\\\[18pt]\n\nThe key feature of that statement is the undeniable truth that alongside the increased\ncomplexity allowed by computing power comes an ever increasing production of\noverwhelming amounts of information.\n\n{從管理角度來看，ERP（企業資源規劃）、從生產角度來看MES（製造執行系統），以及更近期的PLM（從戰略發展/重新開發角度來看）等，作為信息解決方案，從不同角度解決這一問題。然而，這些解決方案雖然有效，但始終受到實施這些系統的工具之間基本不兼容性的困擾}\\\\[18pt]\n\nFrom separate perspectives of the industrial landscape, several systems were brewed by\nthat sheer necessity for organization, automation and waste reduction focusing on that pool\nof useful data.\n\n{本文的目標是從理論角度分析PLM和MES系統的整合，並評論使用Odoo軟件工具來實現該整合}\\\\[18pt]\n\nERP (from a managerial perspective), MES (from a production perspective) and more\nrecently PLM (from a strategic development/redevelopment perspective) emerged as\ninformation solutions tackling this problem from different angles. These solutions, however\neffective, are always plagued by the fundamental incompatibility between the tools that\nimplement those systems.\n\n{Odoo軟件被詳細描述了（關於其在製造環境中的使用），包括它如何實現PLM和MES。然後，軟件被用於模擬一個虛構的公司，該公司設計符合工業4.0的模式。這家公司是一家虛構的新近成立的小型製造公司，其主要生產手段是塑料射出成型，並將增材製造和快速原型製作作為其業務策略的一部分}\\\\[18pt]\nThe Odoo software was described in detail (regarding its use for manufacturing\nenvirorment) icluding how it implements PLM and MES. Then, the software was subjected\nto the simulation of a fictional firm devised in the molds of Industry 4.0. This company was\na fictional recently founded small case manufacturing company that uses plastic injection\nmolding as their primary mean of production and uses additive manufacturing and fast\nprototyping as part of their business strategy.\n\\vspace{15em}\n{關鍵字:產品生命週期管理}\\\\[18pt]\nKeywords: Product Life-Cycle Management, Product Life-Cycle Management, Odoo\n\\vspace{15em}\n\\tableofcontents\n\n\\section{縮寫詞列表}\nLIST OF ACRONYMS\n\nERP：企業資源規劃（Enterprise Resource Planning）\n\nMES：製造執行系統（Manufacturing Execution System）\n\nPLM：產品生命周期管理（Product Lifecycle Management）\n\nMRP：物料資源規劃（Material Resource Planning）\n\nWO：工作訂單（Work Order）\n\nBOM：物料清單（Bill of Materials）\n\nMO：製造訂單（Manufacturing Order）\n\nECO：工程變更訂單（Engineering Change Order）\n\nCPS：智能製造系統（Cyber Physical System）\n\nIoT：物聯網（Internet of Things）\n\nDT：數字孿生（Digital Twin）\n\nGUI：圖形用戶界面（Graphical User Interface）\n\nCNC：電腦數控（Computer Numerical Control）\n\\vspace{15em}\n\n圖表列表\n\nLIST OF FIGURES\nFIGURE 1 VISUAL REPRESENTATION OF THE SCOPE OF DIFFERENT INFORMATION SYSTEMS\n\n不同信息系統範圍的視覺表示\n\nFIGURE 2 VISUAL COMPARISON OF ERP AND PLM CONCERNING GRANULARITY\n\nERP與PLM之間粒度的視覺比較\n\nFIGURE 3 VISUAL REPRESENTATION OF THE ROLL OF DIFFERENT SYSTEMS INCLUDING MES\n\n包括MES在內的不同系統角色的視覺表示\n\nFIGURE 4 THE INDUSTRY EVOLUTION\n\n行業演進的視覺表示\n\nFIGURE 5 EXAMPLE PROJECT OF POWER SUPPLY ADAPTOR CIRCUIT\n\n電源適配器電路示例項目\n\nFIGURE 6 DIAGRAM OF PLM INTEGRATION\n\nPLM整合的圖表\n\nFIGURE 7 DIAGRAM OF WEB SERVICE ARCHITECTURE\n\nWeb服務架構的圖表\n\nFIGURE 8 DEVELOPMENT DIAGRAM\n\n開發流程的圖表\n\nFIGURE 9 EXAMPLE OF STAMPED AK74 PATTERN RIFLE RECEIVER\n\nAK74型槍機架的圖片示例\n\nFIGURE 10 EXAMPLE OF MILLED AK74 PATTERN RIFLE RECEIVER\n\n鋁加工AK74型槍機架的圖片示例\n\nFIGURE 11 EXAMPLE OF INJECTION MOLD MADE USING A 3D PRINTER\n\n使用3D打印機製作的注塑模具的示例\n\nFIGURE 12 3D EXPLODED VIEW OF THE THEORETICAL PRODUCT\n\n理論產品的3D展開圖\n\nFIGURE 13 ISOMETRIC VIEW OF PART A\n\nA部分的等視圖\n\nFIGURE 14 PARTS B AND C\n\nB部分和C部分\n\nFIGURE 15 FUNCTION DIAGRAM OF ODOO CONFIGURATION A\n\nODOO配置A的功能圖表\n\nFIGURE 16 FUNCTION DIAGRAM OF ODOO CONFIGURATION B\n\nODOO配置B的功能圖表\n\nFIGURE 17 SCREENSHOT OF GUI FROM ODOO IN CONFIGURATION B\n\nODOO GUI的截圖（配置B）\n\nFIGURE 18 EXAMPLE OF ODOO’S INTERFACE REGARDING ITEMS\n\n有關項目的ODOO界面示例\n\nFIGURE 19 EXAMPLE OF SPECIFIC ITEM AND ITS METADATA AS DISPLAYED BY GUI\n\n特定項目及其元數據的GUI示例\n\nFIGURE 20 SIMPLIFIED ITEM RELATION DIAGRAM TO THE MANUFACTURING OF A PRODUCT X\n\n產品製造的簡化項目關係圖\n\nFIGURE 21 SIMPLIFIED PRODUCT RELATION DIAGRAM\n\n產品簡化關係圖\n\nFIGURE 22 SIMPLIFIED OPERATION DIAGRAM\n\n簡化操作圖\n\nFIGURE 23 SIMPLIFIED BOM DIAGRAM\n\n簡化BOM圖\n\nFIGURE 24 SIMPLIFIED ORDERS DIAGRAM.\n\n簡化訂單圖\n\nFIGURE 25 OPERATOR INTERFACE DURING THE WO\n\nWO中的操作介面\n\nFIGURE 26 SIMPLIFIED ECO FUNCTION DIAGRAM\n\n簡化ECO功能圖\n\nFIGURE 27 SCREENSHOT OF THE SPECIFIC SETTING TO BE ENABLED\n\n啟用的特定設置的截圖\n\nFIGURE 28 SCREENSHOT OF USER ACCOUNT INTERFACE\n\n用戶帳戶介面的截圖\n\nFIGURE 29 SCREENSHOT OF SECOND USER ACCOUNT INTERFACE\n\n第二用戶帳戶介面的截圖\n\nFIGURE 30 ODOO 3D PRINTER EQUIPMENT ITEM\n\nODOO 3D打印機設備項目\n\nFIGURE 31 OVERVIEW OF EQUIPMENT ITEMS\n\n設備項目概述\n\nFIGURE 32 ODOO PROTOTYPING STATION ITEM REPRESENTATION 1\n\nODOO原型站設備項目表示1\n\nFIGURE 33 PROTOTYPING STATION ITEM REPRESENTATION 2\n\n原型站設備項目表示2\n\nFIGURE 34 OVERVIEW OF WORKCENTER ITEMS\n\n工作中心項目概述\n\nFIGURE 35 SECTIONED DIAGRAM REGARDING PRODUCT DEVELOPMENT\n\n產品開發的分段圖\n\nFIGURE 36 IMAGE OF THE PROTOTYPE PRODUCT ITEM\n\n原型產品項目圖片\n\nFIGURE 37 OVERVIEW OF PRODUCT CLASS ITEMS FOR PROTOTYPE\n\n原型產品的產品類項目概述\n\nFIGURE 38 BOM DIAGRAMS FOR PROTOTYPING\n\n原型製作的BOM圖\n\nFIGURE 39 IMAGE OF THE PROTOTYPE PRODUCT BOM (PART-A)\n\n原型產品BOM的圖片示例（部件A）\n\nFIGURE 40 IMAGE OF OPERATION ITEM AS PRESENTED BY ODOO (BOM PART-A)\n\nODOO呈現的操作項目圖片（BOM部件A）\n\nFIGURE 41 OVERVIEW OF BOMS CREATED FOR PROTOTYPING\n\n為原型製作創建的BOM圖\n\nFIGURE 42 ECO EXAMPLE\n\nECO示例\n\nFIGURE 43 OVERVIEW OF ATTACHED FILES TO\n\nECO附加文件概述\n\nFIGURE 44 QUALITY CONTROL POINT ITEM FOR THE PROTOTYPE PRODUCTION\n\n原型生產的質量控制點項目\n\nFIGURE 45 DEPICTION OF THE MANUFACTURING ORDER\n\n製造訂單的圖表\n\nFIGURE 46 OVERVIEW OF THE RESULTED WORK\n\n結果工作訂單的概述\n\nFIGURE 47 IMAGE OF ODOO FORUM QUESTION REGARDINGE PRODUCTS AFTER MANUFACTURING\n\n關於路由的ODOO論壇問題的圖表\n\nFIGURE 48 OVERVIEW OF THE PRODUCTS AFTER MANUFACTURING\n\n生產後產品的概述\n\nFIGURE 49 DEPICTION OF THE VALIDATION OF THE ECO\n\nECO驗證的圖表\n\nFIGURE 50 DEPICTION OF CHANGES PROVOKED BY THE ECO TO PRODUCT ITEM\n\nECO對產品項目的變更示例\n\nFIGURE 51 SECTIONED DIAGRAM REGARDING PROCESS DEVELOPMENT\n\n過程開發的分段圖\n\nFIGURE 52 RENDER OF HOW THE FINAL PRODUCT SHOULD LOOK LIKE\n\n最終產品的3D渲染\n\nFIGURE 53 PRODUCT ITEM OF THE ALPHA CASE\n\nAlpha盒子產品項目\n\nFIGURE 54 DIAGRAM REGARDING PROCESS DEVELOPMENT FOR MOLD\n\n模具的過程開發示例\n\nFIGURE 55 ECO EXAMPLE OF UPDATE PROCEDURE OF BOM\n\nBOM的ECO示例\n\nFIGURE 56 OVERVIEW OF PRODUCT ITEMS AT THIS STAGE OF THE SIMULATION\n\n模擬過程中的產品項目概述\n\nFIGURE 57 MAIN PATH OF DEVELOPMENT FROM IDEA TO PRODUCTION\n\n從構思到生產的主要開發路徑\n\nFIGURE 58 SECTIONED DIAGRAM REGARDING PROCESS UPGRADE PROCEDURE\n\n過程升級流程的分段圖\n\nFIGURE 59 SECTIONED DIAGRAM REGARDING PROCESS DEVELOPMENT\n\n過程開發的分段圖\n\nFIGURE 60 RELEVANT PRODUCT ITEMS OVERVIEW\n\n相關產品項目的概述\n\nFIGURE 61 EXAMPLE OF ECOS OF A PRODUCT ITEM\n\n產品項目的ECO示例\n\nFIGURE 62 WORKCENTER OVERVIEW 1\n\n工作中心概述1\n\nFIGURE 63 WORKCENTER OVERVIEW 2\n\n工作中心概述2\n\nFIGURE 64 ECO APPLIED TO BOM\n\nBOM的ECO應用\n\nFIGURE 65 TOTAL QUANTITY REGARDING MO\n\nMO的總數量\n\nFIGURE 66 REAL DURATION REGARDING WORK ORDERS\n\n工作訂單的實際持續時間\n\nFIGURE 67 DURATION VARIATION REGARDING WORK ORDERS\n\n工作訂單的持續時間變化\n\nFIGURE 68 OVERALL EQUIPMENT EFFECTIVENESS\n\n整體設備效率\n\nFIGURE 69 DIAGRAM REPRESENTING ODOO SCOPE OF ERP\n\nODOO ERP範圍的圖表\n\nFIGURE 70 GUI OPTIONS OF DATA REPORTING\n\n數據報告的GUI選項\n\nFIGURE 71 TOTAL QUANTITY REGARDING MO FROM PRODUCT ITEM\n\n產品項目MO的總數量\n\nFIGURE 72 UNIT FORECAST OVERVIEW\n\n單位預測概述\n\nFIGURE 73 COMPARISON TO THE LEFT THE ADAPTED DIAGRAM AS THEORIZED BY SAAKSVUORI, A. AND IMMONEN, A.\n\nSAAKSVUORI, A. 和 IMMONEN, A.\n\n(2008), TO THE RIGHT ODOO TAKE ON HOW SYSTEMS INTERACT\n\n(2008) 理論的適應圖表對比 ODOO 對系統互動的看法\n\n\\section{引言}\nINTRODUCTION\n\n1.章節\n\n1. CHAPTER\n\n\\subsection{目標}\n1.1. Objective\n\n本論文的目標是通過分析不同概念和動態來找出可以使用現成的Odoo軟件實現PLM+MES系統的程度，並應用虛構情境來確定這些概念中是否包含在該套裝解決方案中\n\nThe thesis has the objective of finding out how far PLM+MES system can be implemented\nby using the readily available Odoo software by analyzing the different concepts and\ndynamics that would consist said integration and they apply a fictional scenario to determine\nif and which of those concepts are included within this packaged solution.\n\n為了將情況置於背景中，Odoo軟件在實施和商業模式上與市場上的其他解決方案有著顯著的不同。簡而言之，Odoo軟件最初是作為開源的ERP軟件而非PLM或MES軟件而產生的，因此其可用性和模塊化程度都得到了合理的擴展。不用說，這種情況的反面是，它在PLM或MES領域的可用性是不確定的，因此本工作的價值就在於此。\n\nTo contextualize, the Odoo software differs from other solutions in the market\nsubstantially both in implementation and business model. To summarize, the Odoo software\nwas originated as an open-source ERP software as oppose to a PLM or MES software and as\nsuch its availability and modularity are reasonably expanded. It goes without saying that the\ncounter point for this that its usability in the field of PLM or MES is uncertain hence the\nvalue of this work\n\n具體而言，從小型製造企業和初創企業的角度來看，實現PLM-MES系統的全面ERP概念非常有價值。儘管ERP系統在某種程度上是可用的，但它們很少深入到製造領域以擴展成PLM或MES解決方案。此外，另一個方向也很重要，因為PLM解決方案往往缺乏ERP的可擴展性，這通常意味著任何集成都需要專門的特定工作\n\nSpecifically, from the perspective of small manufacturing business and startups, the idea\nof an all-around ERP that implements a PLM-MES system is extremely valuable. Although\nERP systems are somewhat available, they rarely venture deep enough into manufacturing to\nexpand into PLM or MES solutions. In addition, the other direction is also relevant since\nPLM solutions tend to not have the expandability of an ERP which usually means that any\nintegration requires specialized ad-hoc work.\n\n\n雖然修改軟件不在本工作的範圍內，但該軟件有開源社區版本的事實意味著即使對於最特定的情況，也可能更容易且成本更低地適應軟件，進一步強調了這款軟件在小型企業背景下的可能實用性。\n\nAlthough modifying the software do not fall within the scope of this work, the fact that\nthe software has an open-source community version means that adapting the software even\nto the most specific cases may prove to be easier and economical barriers for adopting lower,\nfurther emphasizing the possible utility of this software in the context of small business.\n\n\n最終，論文將就如何進一步開發該系統提供理論和實踐建議。它還將為未來對Odoo軟件的研究奠定基礎，通過確定PLM-MES集成和實施的特定關鍵方面，檢查解決方案的表現。\n\nUltimately, the thesis will give theoretical and practical advices on how to further exploit\nthis system. It will also lay the ground for future works on the Odoo software and checks on\nhow the solution is performing by identifying specific key aspects of PLM-MES integration\nand implementation.\n\\subsection{結構}\n1.2. Structure\n\n\n這項工作可以作為小型製造企業中所描述解決方案的實際實施的參考，並且它可以被視為PLM-MES及其實施的入門材料，以及對其首要原則和對Odoo軟件當前狀態的審查。為此，本論文提供了以下結構：\n\nThis work could be a reference for an actual implementation of the described solution in\nsmall manufacturing enterprises and it can be treated as introductory material to PLM-MES\nand their implementation, as well as first principles and review of the current state of the\nOdoo software regarding it. To such end, this thesis presents the following structure:\n\nChapter 1 - 引言介紹了本論文的內容和目標。此外，它提供了簡要解釋，說明為什麼這種軟件解決方案首先需要這種分析，以及如何組織這種分析。\n\nChapter 2 - 本章介紹了PLM、MES、ERP和工業4.0的基本理論背景。這些理論被提出，以便在進行這種分析時做出有意義的貢獻，同時為如果讀者是小型企業代表，提供有意義的背景。\n\nChapter 3 - 本章涉及PLM和MES系統之間的整合，這是根據先前的研究討論的，也是本論文所分析的內容。這對於確立在分析Odoo軟件時所涉及的概念和動態是有用的。\n\nChapter 4 - 介紹了虛構公司和產品，這些產品是基於工業4.0的模型選擇的，將用於對Odoo軟件進行進一步分析和評估。\n\nChapter 5 - 介紹了Odoo軟件，並更深入地解釋了其用途和功能。考慮到所有前幾章的描述，詳細描述了對Odoo軟件的實驗。\n\nChapter 7 - 結論：最後一章描述了工作的要點：中型企業如何通過知情地使用Odoo軟件實施PLM+MES系統來改善其流程。\n\nChapter 1 - Introduction to this work and its objectives. Furthermore, it provide a\nsuccinct explanation of why this software solution requires this sort of analysis in the\n\nfirst place and how it was be structured.\n▪ Chapter 2 – This chapter introduce the basic theoretical background to PLM, MES,\n\nERP and Industry 4.0. These are presented in order to create the grounds to a\nmeaningful contribution in this kind of analysis as well as providing meaningful\ncontext for its implementation in case the reader is a small business representative.\n\n▪ Chapter 3 – This chapter is all about the integration between PLM and MES systems\nas discussed by previous works and as was be analyzed in this work. This is useful to\n\nstablish the concepts and dynamics that are the subject when analyzing the Odoo\nsoftware.\n\n▪ Chapter 4 – Introduction to the fictional company and products chosen in the molds\n\nof Industry 4.0 to be used in the further analysis and evaluation of the Odoo software.\n\n▪ Chapter 5 – The introduction to the Odoo software as well as a more in-depth\nexplanation of its use and functionalities. The description of the experimentation of\nthe Odoo software taking in consideration all the previous chapters\n\n▪ Chapter 7 - Conclusions The last chapter describes the takeaways of the work: how a\nmedium enterprise can improve its processes through an informed use of a\nPLM+MES system implemented using the Odoo software.\n\\section{理論背景}\nTHEORETICAL BACKGROUND\n\n2. CHAPTER\n\n第二章\n\\vspace{5em}\n\n本章是對於圍繞著生產數據收集和處理概念的不同系統進行簡要介紹，這些系統被學術界以及當前和未來工業認為是不可或缺的，因為它們旨在增強生產的各個方面。\n\nThis chapter is a brief introduction to the different systems that deal with data production\ncollection and processing around the concept of enhancing all aspects of production that are\nfavored by the academic community as well as the current and future state of industry for\nwhich these systems should prove to be indispensable.\n\n從這部分很重要的一點是，這些系統並不是完全獨立的信息系統。它們從不同的角度開始，並試圖解決不同的問題，但由於廣泛的定義，它們不可避免地會相互擴展。這本身就是一個問題，因為從現有的文獻中很難確定一個系統的邊界在哪裡，另一個系統從哪裡開始。\n\nIt is important to notice from this part that these are not completely separate information\nsystems. They start from different perspectives and they try to solve different problems but\nbecause of broad definitions they unavoidably expand into each other. That represents a\nproblem on its own since from the available literature it becomes difficult to pinpoint where\nthe boundary of a system ends and another one starts.\n\nOdoo管理軟件（本文的研究對象）主要將PLM視為跟踪變更和改進的工具，而PLM的其他關鍵特徵，例如使用數字項目（稍後在第2.1節詳述），是物料需求計劃的基本特徵，這也是一種涉及MES的工具。\n\nThe Odoo management software (that is a topic of this work) considers PLM mainly as a\ntool for tracking change and improvements, while other key characteristics of PLM, like the\nuse of digital items (later detailed at section 2.1), is a base characteristic of the material\nrequirements planning which is a tool utility that also dabbles into MES.\n\\subsection{產品生命周期管理}\n2.1. Product lifecycle management\n\\vspace{5em}\n任何個人或團隊所產生的信息都是通過一個實證創造過程完成的。一個任務需要先前的知識/經驗，否則它將不可避免地受到錯誤和更正的困擾，這反過來又需要時間和資源來獲得相應的經驗。傳統上，這種經驗通常嵌入在首次生成信息的人力資源（員工）中。\n\nAny information produced by an individual or team is done by an empirical creative\nprocess. A task requires either previous knowledge/experience or it will be inevitably plagued\nby mistakes and corrections, which in turn generates said experience in exchange of time and\nresources. That experience is, traditionally, embedded in the human resource (employee) that\nproduced the information in the first place.\n\n產品生命周期管理（PLM）是一個組織過程，旨在控制產品在整個生命周期中的所有方面的信息流動。正如大家可以想像的，這個定義及其廣泛的範圍並不會讓人更容易理解PLM。對於所有目的來說，重點是PLM真正的價值在於涉及變化的方面。\n\nProduct Life-Cycle Management (PLM) is an organizational process that aims to control\nthe flow of information regarding all aspects of a product throughout its life-cycle. As one\ncan imagine, this definition, and its broad scope, does not make understanding PLM any\neasier. The thing to focus on, for all purposes, is that PLM true value is in what concerns\nchange.\n\\includegraphics[width=0.9\\textwidth,height=0.5\\textwidth]{P13.png}\n\\begin{center}\n\\large\n\\textbf\n{Figure 1 Product lifecycle stages (Tripaldi, 2019)}\\\\\n{圖1 產品生命周期階段（Tripaldi，2019）}\n\\end{center}\nPLM 最重要的是一種連接技術，而不是一個獨立的技術島或信息處理系統（Saaksvuori 和 Immonen，2008）。其理念是公司人員生成的每一個信息都具有相當於所投入時間和金錢的價值。利用這些信息可以省錢，不利用這些信息會浪費金錢。這一點在設計過程中更容易理解。\n\nPLM is above all a connecting technology, not an individual technology islet or\ninformation processing system (Saaksvuori and Immonen, 2008). The idea is that every\ninformation produced by company personnel holds value equivalent to the time and money\ninvested. Using that information saves money, not using that information wastes money. This\nis easier to understand when looking to a design process.\n\n例如，如果一位工程師設計了一個電子電路，保存CAD圖紙的文件的價值等同於投入其中的時間和金錢。問題在於，傳統系統中只有工程師知道文件背後的設計過程，其中包含的內容以及可能的用途的程度。然而，從公司其他部門的角度來看，這只是數據庫中的一個文件，與其他成千上萬個文件並列。結果是，單獨看來，這些信息的用途有限。\n\nE.g. if an engineer designs an electronic circuit, the file holding the CAD drawing has an\nequivalent value to the time and money invested in it. The problem comes from the fact that\nin a traditional system only the engineer knows the design process behind the file, the extent\nof what is inside and its possible uses. While, from the perspective of the rest of the company,\nthat is just a file in the database alongside thousands of others. The result is that, on its own,\nthe information is of limited use.\n\n如果偶然有另一位工程師在進行類似設計，他/她將極其難以找到該文件並將其應用於自己的設計中。最終，這將導致浪費，因為工程師 #2 將不得不花費更多的時間和金錢去做一些已經完成的工作，只是因為該信息不容易獲得或組織得不好。\n\nIf by any chance there is another engineer working in a similar design it will become\nextremely difficult for him/her to find that file and use it in his own design. Ultimately this\nresults in waste because Engineer#2 will have to spend more time and money doing\nsomething that was already made just because that information was not easily available or\nwell organized.\n\n這種情況不僅限於產品設計，還涉及產品生命周期的所有方面，隨著時間的推移而產生變化。必須有人來組織該產品如何生產、如何移動、包裝、分發和處置。當發現問題或存在改進時，這些變化也會產生信息並消耗資源。如果公司無法利用有關產品構思各個階段的現有信息，則每次重新設計都會浪費資源。\n\nThis scenario is not limited to product design, but also to all aspects of the product\nlifecycle that produces change over time. Someone had to orchestrate how that piece will be\nproduced , how that piece will be moved,packed , distributed and disposed of. When a\nproblem is found or improvements are possible those changes also produce information and\nconsume resources. If the company cannot take advantage of that existing information about\nall those phases of the product conception it will waste resources at every single redesign.\n\n產品生命周期管理包括一個信息系統，允許在組織內部和組織之間進行信息和知識共享（Sudarsan 等，2005），通過控制和組織那些信息，否則將僅由生成這些文件的人力資源所承擔的文件。它實現這一目標的方式是通過在對象導向架構中以數字“項目”的形式虛擬化產品生命周期的所有組件。正如（Saaksvuori 和 Immonen，2008）所解釋的，項目是一種系統化和標準化的方式，用於識別、編碼和命名產品、產品元素或模塊、組件、材料或服務。\n\nProduct Lifecycle Management consists of an information system that allows information\nand knowledge sharing within and between organizations (Sudarsan et al., 2005) minimizing\nthe waste by controlling and organizing those files with information that would otherwise\nbe carried only by the human resource that produced said files. The way it accomplishes that\nis by virtualizing all components of the product life-cycle in the form of digital “items” in an\nobject oriented architecture. As explained by (Saaksvuori and Immonen, 2008),an item is a\nsystematic and standard way to identify, encode and name a product, a product element or\nmodule, a component, a material or a service.\n\n這些項目對象無疑是虛擬表示，它們保存有關其所嘗試表示的信息，並允許連接和鏈接信息。如（D\'Antonio 等，2015）所述，產品信息應與其生產過程相關聯。PLM允許將定義的流程與產品相關聯，並對流程執行的順序提供限制。例如，電路原理圖的CAD圖紙附加到虛擬電路對象上，該對象保存有關文件內容的基本信息，以及該文件隨時間的推移的所有先前版本，以及與其所屬的材料清單（BOM）、製造它所需的機器、組裝它所需的流程等項目的鏈接，更重要的是所有這些項目隨著每個改進的迭代而發生的變化。\n\nThese item objects are, by all means, virtual representations that hold metadata regarding\nwhat it tries to represent and allows to connect and link the information. As described by\n(D’Antonio et al., 2015) product information should be connected to its production process.\nPLM allows to link defined processes to the product and to provide constraints on the order\nof process execution. E.g. a CAD drawing for a circuit schematic is attached to a virtual\ncircuit object that holds basic information about what is contained in the file and all the\nprevious iterations of that file over time as well as links to items representing which bill of\nmaterials (BOM) it belongs to, the machines necessary to manufacture it, the processes\nnecessary to assemble it and more importantly how all those items changed over each\nimproving iteration.\n\n這種全方位的虛擬化使得信息在其自身的複雜性中得以珍貴的背景。它允許更快地訪問，更容易理解整個過程，以及每個部分發生變化時的後果。這是將現有數據組織成未來參考的最佳方式，因為它允許結構和透明度。\n\nThis all-around virtualization gives precious context to information otherwise lost on its\nown complexity. It allows for faster access, easier understanding of the whole and the\nconsequences of what happens when there is change for each part. This is the best way of\norganizing the existing data for future reference because it allows for structure as well as\ntransparency.\n\n總之，作為一個系統，PLM 的目標是跟踪與產品生命週期有關的所有方面的功能變化，以使公司能夠從戰略上受益，避免信息浪費。它通過將真實事物虛擬化為數字項目的形式來實現這一目標，這些項目存儲有關該項目所代表的信息的文件。這些文件又可以使用元數據相關聯並隨時間跟踪。\n\nTo sum up, PLM as a system aims to track functional change in all aspects regarding the\nproduct life, in a way that the company can benefit strategically from it by avoiding\ninformational waste. It does so by virtualizing the real thing in the form of digital items that\nstore the files regarding what the item is supposed to represent. These can in turn be\ncorrelated and tracked over time using metadata.\n\\subsection{企業資源規劃}\nEnterprise Resource Planning\n\n在資訊系統的早期階段，其中一種最早得到廣泛實施的系統被稱為MRP（物料需求規劃）。儘管不一定基於軟體，但這種系統的廣泛實施是計算技術的自然結果，旨在通過計算生產所需的材料來解決物資供應和產品產出方面的瓶頸問題。隨著它在企業中的普及，到了70年代末和80年代初，該系統逐漸發展演變。這導致了MRP II（製造資源規劃）的產生，更重要的是，對本文範圍的ERP（企業資源規劃）的產生。\n\nIn the early days of information systems, one of the first systems to find wide\nimplementation was the called MRP (Material Requirements Planning). Although not\nnecessarily software based, this system wide implementation was a natural consequence of\ncomputing technology and it aimed to solve bottlenecks regarding the material supplying and\nproduct output by calculating the material needs for production. As it became more\nubiquitous in the enterprise in the late 70’s and early 80’s the system evolved. This gave\norigin to MRP II (Manufacturing Resource Planning) and, more important to the scope of\nthis paper, ERP (Enterprise Resource Planning).\n\n大多數現代企業資源規劃系統擴展了原始的MRP功能，包含了企業運營的許多其他方面，同時對系統添加了模塊化。\n\nFor the most part modern Enterprise Resource Planning expands the original MRP\nfunction to encompass many other aspects of enterprise operations all while adding\nmodularity to the system.\n\n現代ERP系統通常是基於模塊的；不同的模塊具有不同的用戶界面和不同的用戶群組。例如，製造模塊、採購模塊、物流模塊、財務模塊、維護模塊、銷售模塊 (Saaksvuori and Immonen, 2008)。這些模塊橫跨許多知識領域，但大多數情況下，它們都是從生產、銷售和服務的角度來擴展的。圖2顯示了ERP系統的範圍與其他信息系統的比較。\n\n\\includegraphics[width=0.9\\textwidth,height=0.5\\textwidth]{P16.png}\n\\begin{center}\n\\large\n\\textbf\n{Figure 2 Visual representation of the scope of different information systems\n(Adapted from Stark 2015)}\\\\\n{圖2 不同信息系統範圍的視覺化呈現}\n\\end{center}\n\nModern ERP systems are often module based; different modules have different user\ninterfaces and different user groups. For example, Manufacturing module, Procurement\nmodule, Logistics module, Financial module, Maintenance module, Sales module.\n(Saaksvuori and Immonen, 2008). These modules expand across many domains of\nknowledge but for the most part they do so always from the perspective of Production, Sales\nand Service. Figure 2 depicts the scope of the ERP system in comparison to other Information\nsystems.\n\nVisual representation of the scope of different information systems\n(Adapted from Stark 2015)\n不同信息系統範圍的視覺表示（根據Stark 2015進行了調整）\n\n這種跨領域的廣泛覆蓋是合理的，因為像MRP一樣，ERP操作的重點是處理交易和訂單。 ERP的重點是控制資源的輸入、保留和輸出對公司的變化，無論是產品、原材料還是包裝。\n\nThis sort broad reach across the domains makes sense because the ERP operations, as\nwere in the case of MRP, focus on handling transactions and orders. The focus of the ERP is\ncontrolling the change in input, retention and output of resources to the company, be of\nproducts, raw materials or packing.\n\n從同一張圖中，可以看到PLM和ERP之間的理論對比，儘管它們都非常廣泛。儘管ERP擴展了知識領域，但它局限於少數功能；而PLM則擴展到涉及產品的所有功能。如圖3所示，另一個代表兩者之間良好差異的觀點是關於ERP和PLM影響行業的規模或細節水平缺乏重疊（即這兩個系統的細微程度）。\n\nFrom the same image, it is possible to see the theoretical contrast between PLM and ERP\neven though they are both extremely broad. While ERP expands across the domains of\nknowledge but limits itself to a few functions, PLM expands across all functions that involve\nthe product. As portrayed by Figure 3, another point of view that represents a good difference\nbetween the two is the lack of overlap in what concerns the scale or level of detail in which\nERP and PLM affects the industry (i.e. the granularity of the two systems).\n\nVisual comparison of ERP and PLM concerning granularity\n(Adapted from Stark, 2015)\n對於ERP和PLM的粒度的視覺比較（根據Stark，2015年進行了調整）\n\n\\includegraphics[width=0.9\\textwidth,height=0.5\\textwidth]{P17.png}\n\\begin{center}\n\\large\n\\textbf\n{Figure 3 Visual comparison of ERP and PLM concerning granularity\n(Adapted from Stark, 2015)}\\\\\n{图3 ERP和PLM在粒度方面的视觉比较}\n\\end{center}\n\n如我們所看到的，ERP主要關注交易和訂單。一旦訂單完成，ERP系統就會針對該訂單處理相關的交易，但在此之後並不會過多關注該訂單。另一方面，PLM的細微程度則關注產品的訂單，並延伸至程式、系列甚至整個產業（Stark，2015年）。\n\nAs we can see, ERP is primarily concerned with the transaction and the order. Once an\norder is closed out, the ERP system processes the transactions with respect to that order but\nis not very much concerned with the order beyond that. On the other hand, PLM’s granularity\nis concerned with the order for the product and extends not only into the program, but into\nthe family and the entire industry (Stark, 2015).\n\n這尤其引人注目，因為它展示了這兩個系統如何在領域中互補。ERP的一個方面值得指出的是，它相對容易與其他系統集成。例如，ERP-MES集成已被廣泛研究和實施，甚至制定了相應的標準（ISA 95 - IEC 62264）。其中一個原因是ERP系統的模塊化性質，這在本文中進一步討論（第5章）並且通過對Odoo軟體的分析加以確認。這是因為Odoo軟體最初是從一個開源的ERP系統演變而來的。\n\nThis is particularly interesting because it demonstrates how the two systems can and do\ncomplement each other in the field. One of the aspects of ERP that should point out is that it\nis comparatively easier to integrate with other systems. ERP-MES integration for instance\nhas been widely studied and implemented to the point where standards have been developed\nfor it (ISA 95 - IEC 62264). One argument for this is the modular nature of the ERP system\nwhich is discussed further in the paper in (Chapter 5) with the analysis of the Odoo software.\nThat is because the Odoo software evolved originally from an open-source ERP system.\n\nERP系統的本質最好由（Umble等，2003年）總結：ERP提供了一個統一的企業視圖，涵蓋了所有功能和部門，並且在企業數據庫中追踪了所有涉及財務、銷售、營銷、採購和人力資源的行動。這一目標的實現是為了擴大客戶目標，並在市場逐漸轉向創新的情況下增加客戶的份額（Vásquez和Escribano，2017年）。\n\nThe nature of the ERP system is best summed up by (Umble et al. 2003): ERP provides a\nunified enterprise view of the business which encompasses all functions and departments,\nand an enterprise database in which all actions concerning finance, sales, marketing,\npurchasing and human resources are traced. The aim of this achieving is to expand the\ncustomers target and increase customers share in a market that slowly pivots to innovation\n(Vásquez and Escribano, 2017).\n\n\\subsection{製造執行系統}\nManufacturing Execution System\n\n完全集成系統的最後一個關鍵是製造執行系統（MES）。 MES是管理層和生產層之間通信的一個層面；它是一種軟體，允許組織層與通常由ERP支援的工廠控制系統之間進行數據交換，在這些系統中，使用了多種不同的、高度定制的軟體應用（Meyer等，2009年）。\n圖4是對不同系統如何適應製造和開發範圍的清晰描述。\n\nThe final key of a fully integrated system would be the Manufacturing Execution System\n(MES). A MES is a layer of communication between the management and the production\nlevels; it is a software that allows data exchange between the organizational level, usually\nsupported by an ERP, and the shop-floor control systems, in which several, different, very\ncustomized software applications are employed (Meyer et al., 2009).\nFigure 4 is a nice depiction of how different systems fit within the scope of manufacturing\nand development.\n\n\\includegraphics[width=0.9\\textwidth,height=0.5\\textwidth]{P18.png}\n\\begin{center}\n\\large\n\\textbf\n{Figure 4 Visual representation of the roll of different systems including MES}\\\\\n{图4 包括MES在内的不同系统角色的视觉表达}\n\\end{center}\n\n就所有目的而言，MES的主要目標是提供數字和數據，最終用於確定不僅產品的狀況和質量，還包括影響生產的所有過程。機器、感應器以及與產品接觸並提供任何類型輸出的任何東西，基本上將這些數據交給MES進行即時排序和處理。例如，如果經理想要即時了解生產數字或查看拒收率的圖形表示，該數據將從MES軟件中獲得。\n\nFor all purposes MES main goal is to provide the numbers and data that ultimately is used\nto ascertain the condition and quality of not only the products but also all the processes that\naffect production. Machines, sensors, and anything that comes in contact with the product\nand provides output of any kind, basically, handing said data to the MES for sorting and\nprocessing in real time. E.g. if a manager wants to know the instant production numbers or\nto see a graphical representation of the rejection rate, that data will be available from a MES\nsoftware.\n\n傳統上，管理層將從這種類型的信息中評估工作並做出決策。正如前面提到的，這種數據收集完全適用於ERP的使用，不僅因為如果配合實時生產數據，資源管理可以更加詳細，而且還因為ERP的模塊化通常意味著無縫集成。 MES（就像ERP一樣）也已被證明並實施了數十年，它們的實施已經被合理地標準化。\n\nTraditionally it is from this sort of information that management will evaluate efforts and\nmake decisions. As mentioned before this sort of data collection fits perfectly to the use of\nERP not only because the management of resources can be much more detailed if\ncomplemented by real time production data but also because the modularity of ERP usually\nmeans a seamless integration. MES (like ERP) has also been proven and implemented for\ndecades and their implementation have already been standardized to a reasonable degree.\n\nMES的功能被MESA International（1997年）分為11個類別；此外，ISA95-IEC62264（2013年）標準列出了每個企業層面以及每種類型的信息系統的任務。該標準還為信息系統之間交換的數據結構提供了定義，旨在增強它們的集成性；然而，它主要集中在ERP-MES-車間集成上（D’Antonio等，2015年）。\n\nThe functionalities of a MES have been grouped in 11 categories by MESA International\n(1997); furthermore, the tasks for each enterprise layer and, in turn, for each kind of\ninformation system are listed in the ISA95 – IEC62264 (2013) standard. This standard also\nprovides definitions for the data structures to be exchanged among information systems\naiming to enhance their integration; however, it mainly focuses on ERP-MES-Shop floor\nintegration (D’Antonio et al., 2015).\n\n相比之下，PLM研究要新得多，而PLM-MES集成，這是本工作的主要焦點，更是如此。這種集成的挑戰以及與之相關的最新技術在第3章中已經涉及，以及背後的理論結構。暫時只需指出，由於MES提供了通過其組織變更並通過生成文件形式的信息來驗證結果的反饋，而PLM則專注於通過文件組織跟踪變更，因此PLM-MES集成確實具有價值。\n\nPLM studies by comparison are much more recent and PLM-MES integration, a main\nfocus of this work, even more so. The challenge of this sort of integration and the state of the\nart regarding it was be covered in (Chapter 3) as well as the theoretical structure behind it.\nFor now, suffice to point out that since MES provides the feedback by which changes are\norchestrated and results are validated by generating information in the form of files and PLM\nfocus on the tracking change by file organization there sure is value in the PLM-MES\nintegration.\n\\subsection{工業4.0 }\nIndustry 4.0\n\n在現代文獻中，"Industry 4.0"這個術語一再被提及，它代表著生產演進的下一步或當前步驟。它代表了第四次工業革命，其中第一次革命以蒸汽動力的採用為特徵，第二次革命主要使用電力，而第三次革命則以數字技術的實施為特徵。圖5很好地表示了工業革命的進展。\n\nThe term Industry 4.0 is one mentioned time and time again in modern literature as the\nnext or current step in the evolution of production. It represents what is the 4\nth industrial\nrevolution where the first was marked the adoption of steam power, the second was marked\nmainly using electrical power and the 3\nrd was characterized by the implementation of digital\ntechnology. Figure 5 nicely represents the progression of industrial revolutions.\n\n\\includegraphics[width=0.9\\textwidth,height=0.5\\textwidth]{P19.png}\n\\begin{center}\n\\large\n\\textbf\n{Figure 5 The industry evolution}\\\\\n{图5 行业演变}\n\\end{center}\n\n\n以廣泛的視角來看，第四次工業革命最終將以數字連接和生產之間的完全整合為特徵。眾所周知，數字網絡的發展是支撐現代世界的關鍵技術。它已經改變了人類的互動方式和商業運作方式。然而，目前應用於工業的水平是否構成了一次工業革命仍然不確定，因為在其他所有革命中，都有一個生產暴增的現象，而這一次尚未出現。事實上，我們尚未達成對“Industry 4.0”的共識定義。然而，已被廣泛接受的是，Industry 4.0至少具有3種技術特徵。這些是物聯網（IoT）、雲計算和Cyber-Physical Systems（CPS）的發展，後者對於本文的背景尤為重要。\n\nIn broad strokes the 4th industrial revolution is (or will be) ultimately marked by the full\nintegration between digital connectivity and production. As it is well known that the\ndevelopment of digital networks is the pivotal technology that sustain the modern world. It\nhas changed the way humans interact and do business. However, whether the current level in\nwhich it is applied to the industry constitutes an industrial revolution is still uncertain because\nin all other revolutions have been marked by a violent increase in production that is yet to\nhappen this time around. In fact, we are still to reach a shared definition of Industry 4.0.\n\nCPS是由真實實體（例如機器）和其相應的虛擬模型組成的系統，嵌入了模擬真實對應物行為的所有模型，這些系統能夠相互通信（D\'Antonio等，2017年）。其理念是，如果對一個系統中有關流程的所有物理儀器開發數字孿生體（DT），使得數字對應物之間可以互相交互以及與物理世界進行互動，則該流程的創新或變更將會更快速、更有效地發生。例如，工程師可以使用DT的互動模擬一個變更，然後，如果成功，即可將該變更自動應用於實時生產線上，執行測試，收集數據並將其反饋給系統，而無需通過手動輸入完成，所有這些都是通過網絡完成的。\n\nWhat has been widely accepted however is that there are at least 3 technologies that\ncharacterize Industry 4.0. Those are the Internet of things (IoT), Cloud computing and the\ndevelopment of Cyber-Physical Systems (CPS), the last of which is particularly important\nfor the context of this thesis.\nCPS are systems consisting in a real entity (for example, a machine) and its corresponding\nvirtual model – embedding all the models for mimicking the behavior of the real counterpart\n– capable to communicate with each other (D’Antonio et al., 2017). The idea is that, if one\nwere to develop a digital twin (DT) of all physical instruments regarding a process in a system\nthat allows for the digital counterparts to interact with each other as well as interacting with\nthe physical world, innovation or change of said process would occur much faster and\neffectively. E.g., an engineer could simulate a change using the DT’s interaction, then, if\nsuccessful, apply the change automatically to the production line in real time, execute tests,\ngather data and feed it back to the system without the need of manual input with all being\ndone through the network.\n\n從所有這些中可以得出的主要觀點是，PLM-MES系統可能是實現適當CPS的第一步，因為它提供了虛擬化和必要的控制，以達到接近虛擬孿生體的程度。爭議的問題是，它目前對工業應用的影響有多深。\n\nThe main point to be derived from all this is that PLM-MES systems possibly are the first\nstep to achieve a proper CPS since it provides for the virtualization and necessary control to\nreach something near a virtual twin. The debatable matter is how deep is its current effect in\nindustrial application.\n\n然而，“Industry 4.0”這個術語，如果可以這麼說的話，是對數字連接、網絡發展和互聯網應用於工業的不斷增長的一個有用標誌。在“Industry 4.0”的範圍內常常提到的另一個術語是所謂的“Lot Size One”或“Lot 1”。這是每個項目都根據買家的個別規格定制的概念，其中客戶訂單不是開始供應鏈設備運動的開始；而是啟動製造機器。\n\nNonetheless, the term Industry 4.0 is, if anything, a useful denotation to the increasing\napplication of digital connectivity, network development and the internet to industry.\nAnother term often included within the scope of Industry 4.0 is the called Lot Size One or\nLot 1. This is the idea of each item customized to the individual specifications of the buyer\nin a system in which a customer order does not start supply chain equipment moving; it turns\non manufacturing machines.\nThe theory behind it is that as production and development becomes more and more\nflexible as this sort of manufacturing becomes not only viable but also attractive. Having a\ntailored requested product means that there are no storage requirements, no inventory\noverhead, and of course a 100% guaranteed sell. This concept is not new by any means, in\nfact it predates Industry 4.0 quite a lot. In the book “The machine that changed the world”\nthe authors (Womack et al., 1990) discuss that toward this end, lean producers employ teams\nof multiskilled workers at all levels of the organization and use highly flexible, increasingly\nautomated machines to produce volumes of products in enormous variety.\n\n它的理論基礎是，隨著這種類型的製造變得越來越靈活，這種製造不僅是可行的，而且也是有吸引力的。擁有定制的產品意味著沒有儲存要求、沒有庫存開支，當然也保證了100%的銷售。這個概念並不新鮮，實際上，它比“Industry 4.0”出現得早得多。在書籍《改變世界的機器》中，作者（Womack等，1990年）討論了，為了實現這一目標，精益生產者在組織的所有層次都聘用了多技能工人團隊，並使用高度靈活、越來越自動化的機器來生產大量的產品以及無數的品種。\n\nIn a way ‘Lot Size One’ is nothing more than the extrapolation of this sort of thinking. Of\ncourse, the industry is yet to reach such level of production flexibility, but glimpses of this\nsort of mentality can already be seem on more modular productions. One of the best examples\nis amazon packing systems. E.g. a customer receives a package from Amazon containing a\nmix of products that has been packaged just for him/her according to their specific order.\nAlthough superficial in nature, this represents a high level of customization for the customer.\n\n它的理論基礎是，隨著這種類型的製造變得越來越靈活，這種製造不僅是可行的，而且也是有吸引力的。擁有定制的產品意味著沒有儲存要求、沒有庫存開支，當然也保證了100%的銷售。這個概念並不新鮮，實際上，它比“Industry 4.0”出現得早得多。在書籍《改變世界的機器》中，作者（Womack等，1990年）討論了，為了實現這一目標，精益生產者在組織的所有層次都聘用了多技能工人團隊，並使用高度靈活、越來越自動化的機器來生產大量的產品以及無數的品種。\n\nAnother great example is electronics prototyping. Currently there are companies that take\nyour printed circuit board designs and BOM, delivering small batches of assembled\nprototypes at a low cost. Prototyping of electronical devices used to be a highly expensive\nprocess, but some companies have flexibilized their production to the degree where they are\nable to deliver it fast and reliably. Again, that is possible because electronics components are\ninherently modular systems even if of high complexity. The following image (Figure 6\nExample project of power supply adaptor circuit) is an example of an electronic circuit that\nwas designed by this student and manufactured by JLCPCB within a single week.\n\\section{PLM和MES的最新技術狀態及整合}\n\\subsection{這種整合在實際中會是什麼樣子？}\n\\section{公司和產品介紹}\n\\subsection{產品和流程}\n\\subsection{A部分}\n\\subsection{B部分和C部分}\n\\subsection{模具}\n\\subsection{模擬過程中分析的內容}\n\\section{Odoo軟體}\n\\subsection{它的運作方式}\n\\subsection{Odoo軟體介紹}\n\\subsection{Odoo對製造的看法：}\n\\subsection{Odoo的信息結構}\n\\subsection{開始模擬}\n\\subsection{用於模擬的軟體選項}\n\\subsection{相關的設置細節}\n\\subsection{建立公司結構}\n\\subsection{用戶}\n\\subsection{工作中心和設備}\n\\subsection{發展}\n\\subsection{想法 - 設計 - 產品原型}\n\\subsection{流程計劃 - 生產測試 - 生產}\n\\subsection{流程升級程序}\n\\section{Odoo在PLM和MES方面的成就}\n\\subsection{該軟體如何處理項目？}\n\\subsection{產品生命周期的各個方面是否都有所體現？}\n\\subsection{這些項目如何體現？}\n\\subsection{創建全新產品有多容易？}\n\\subsection{產品的呈現方式是什麼？}\n\\subsection{改一個是否會影響另一個？}\n\\subsection{創建全新生產過程有多容易？}\n\\subsection{過程如何描述？}\n\\subsection{過程如何與其產生的產品集成和參考？}\n\\subsection{更改一個是否會影響另一個？}\n\\section{結論}\n\\section{參考文戲}\n\\end{document}\n\n \n \n \n \n', 'tags': '', 'url': 'LaTeX.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': '教學Video', 'text': '\n \n 文字影片檔 \n 摘要: \n \n', 'tags': '', 'url': '教學Video.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};